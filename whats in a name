'''
Author: Anna Triplett 
Due date: 9/30/2025 
Bugs: Limited number of titles(does not include all possible titles only a selected amount)
Bonus: Replace a character 
Sources: Ms.Marciano, Mr.Campbell
Log: 1.0 initial release
'''
import random 

def reverse_string(string):
    '''
    Description: takes the users words and prints the reverse
    
    Args:
         string (str): word or phrase 
    Returns:
        str: string reversed  
    '''    
    return string[::-1]

    
def total_vowels(string):
    '''
    takes the users words and prints the amount of vowels
    
     Args:
        string (str): word or phrase  
    Returns:
        int: total vowels in string 
    '''
    vowels = ['a', 'e', 'i', 'o', 'u','A', 'E', 'I', 'O', 'U'] 
    total = 0
    #For each letter (character) in the name, it checks if it is a vowel from the list above and adds it to the total
    for char in string:
        if char in vowels:
            total += 1 
    return total



def total_consonant(string):
    '''
    takes the users words and prints the amount of vowels
    
     Args:
        string (str): word or phrase  
    Returns:
        int: total vowels in string 
    '''
    consonants =  ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x','z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X','Z']
    total = 0
  #For each letter (character) in the name, it checks if it is a vowel from the list above and adds it to the total
    for char in string:
        if char in consonants:
            total += 1 
    return total


def lower(name):

    '''
    takes a name and replaces a the uppercase letters with corrosponding lowercase letters
    
    Args:
        string (name): fullname
    Returns:
        str: the replacement, fullname all lowercase
    '''

    name_out = ""
    
    for letter in name: 
        if ord(letter) > 64 and ord (letter) < 91:#Takes from the ascii table and checks to see if the letters are uppercase from the set of numbers given 
            num = ord(letter)#converts letters to numbers 
            num += 32 #Turns the word into lowercase letters 
            letter = chr(num)#converts number back to letters 
            name_out += letter #Puts the letters back into place(the orginal word)
        else:
            name_out += letter
    return name_out 

def upper(name):
 
    '''
    takes a name and replaces a the lowercase letters with corrosponding uppercase letters
    
    Args:
        string (name): fullname
    Returns:
        str: the replacement, new word all uppercase
    '''
    name_out = ""
    
    for letter in name: 
        if ord(letter) > 96 and ord (letter) < 122:#Takes from the ascii table and checks to see if the letters are lowercase from the set of numbers given 
            num = ord(letter)#converts letters to numbers 
            num -= 32 #Turns the word into uppercase letters 
            letter = chr(num)#converts number back to letters 
            name_out += letter #Puts the letters back into place(the orginal word)
        else:
            name_out += letter
    return name_out 

def replace_character(string, old_character, new_character):
    '''
    takes a word and replaces a letter with another letter
    
    Args:
        string (str): Word that is to be replaced
        old_character (str): The letter getting replaced
        new_character (str): The letter now going into the word
    Returns:
        str: the replacement, new word (if the word has L, replaces it with D)
    '''
    new_string = ''
    #For each letter (character) in the name, it changes the old character with the new character
    for char in string:
        if char == old_character:
            new_string += new_character
        else:
            new_string += char
    return new_string

def is_palindrome(string):
    '''
    takes the users words and sees if it is a palindrome
    
    Args:
        string (str): word or phrase 
    Returns:
        bool: True/False depending on if string is the same when it is reversed 
    '''
    return string == reverse_string(string)

def get_names(fullname):
    '''
    makes a split function for your first,middle, and last name 
    
    Args:
        string (fullname): inputted fullname
    Returns:
        str: A list of names 
    '''
    names = []
    name = ''
    #Goes through each character in the inputted word, if it is a space then it splits the names and re-inputs it as an array 
    for letter in fullname:
        if letter == " ":#If the character in the fullname is a space 
            names.append(name)#Splits fullname (first, middle,last)
            name = ''#Sets the variable as empty 
        else:
            name += letter#Adds the letters the the string 
    names.append(name)#Adds string to list of names 
    return names

def remove_title(name):
    '''
    removes the title of a name 
    
    Args:
        string (name): fullname
    Returns:
        str: names without title 
    '''
    names = get_names(name)
    titles = ['Dr.','Sir','Esq','Ph.d','Rev.']
    #if an element from titles is in the fullname, it removes it 
    for title in titles:
        if title in names:
            names.remove(title)
    return ' '.join(names)



def first_name(name):
    '''
    Uses get_names to pull out first element of the list 
    
    Args:
        string (name): fullname
    Returns:
        str: First name 
    '''
    name = remove_title(name)#runs remove_title function which removes the title from the name 
    fullname = get_names(name)
    return fullname[0]#Returns the first word, until the first space 

def middle_name(name):
    '''
    Uses get_names to pull out middle element of the list 
    
    Args:
        string (name): fullname
    Returns:
        str: middle name
    '''
    name = remove_title(name)#runs remove_title function which removes the title from the name 
    fullname = get_names(name)
    return ' '. join(fullname[1:-1])#Goes through each character, start to end, and relizes the spaces, returning the word from the first space to the second 

def last_name(name):
    '''
    Uses get_names to pull out last element of the list 
    
    Args:
        string (name): fullname
    Returns:
        str: last name 
    '''
    name = remove_title(name)#runs remove_title function which removes the title from the name 
    fullname = get_names(name)
    return fullname[-1] #Goes through each character, start to end, and relizes the spaces, returning the word from the last space to the end  

def get_initials(name):
    '''
    takes the users full name and prints the first letter of each words, their initials
    
    Args:
        fullname (str):  fullname (first, middle, Last)
    Returns:
        str: the first letter of each name  
    '''
    name = remove_title(name)#runs remove_title function which removes the title from the name 
    name_list = get_names(name)
    initials = ''
    #Takes the first character in each word from get names and returns them 
    for name in name_list:
        initials += name[0]
    return initials
        
def get_title(name):
    '''
    Determines whether the number is in the list 
    
     Args:
        string (name): fullname
        array (list): someting from the list 
        element (any): something not in the list 
    Returns:
        bool: True/False based on if element is in array  
    '''
    titles = ['Dr.','Sir','Esq','Ph.d','Rev.']
    #For each word in the name, it sees if a title is in the word and returns a boolean 
    for title in titles:
        if title in get_names(name):
            return True
    return False
            
def hyphen(full_name):
    '''
    Determines whether there is a hyphen in the last name 
    
     Args:
        fullname (str):  Last name 
    Returns:
        bool: True/False based on if element is in array  
    '''
    #For each word in the name, it sees if a hyphen is in the word and returns a boolean 
    return "-" in last_name(full_name)

def shuffle_random(name):
    '''
    Modifys array to create a random name (mix up letters)
    
     Args:
        string (name): fullname
    Returns:
        str. random name 
    '''
    
    names = get_names(name)
    name = list(first_name(names))
    random.shuffle(name)#Shuffles the characters
    return ''.join(name)#Joins back the character to make a new word (mixed up)
    

def main():
    name = input("Enter Your Fullname: ")

    while True:
            option = input('What would you like to do:\n 1. Reverse your name!\n 2. Total Number of vowels!\n 3. Total Number of Consonants!\n 4. Replace a character!\n 5.Is it a palindrome?\n 6. Return your Initials!\n 7. Convert to lower case\n 8. Convert to upper case\n 9. Display first name\n 10. Display middle name\n 11. Display last name\n 12. Do you have a title distinction\n 13.If last name contains a hyphen\n 46. Generate random letters\n Enter Option Here: ')

            if option =='1':
                print(reverse_string(name))
            elif option =='2':
                print(total_vowels(name))
            elif option =='3':
                print(total_consonant(name))
            elif option =='4':
                old_character = input('Pick letter in word to be replaced')
                new_character = input('Pick letter to replace old letter')
                print(replace_character (name, old_character, new_character))
            elif option =='5':
                print(is_palindrome(name))
            elif option =='6':
                print(get_initials(name))
            elif option =='7':
                print(lower(name))
            elif option =='8':
                print(upper(name))
            elif option =='9':
                print(first_name(name))
            elif option =='10':
                print(middle_name(name))
            elif option =='11':
                print(last_name(name))
            elif option =='12':
                print(get_title(name))
            elif option =='13':
                print(hyphen(name))
            elif option =='14':
                print(shuffle_random(name))
            else:
                print('invalid')
main()

